@import Main._
@import scalaworld.Readme._

@sect{Exercises}

  @sect{Don't catch Throwable}
    @hl.scala
      // Refactor this
      object A {
        try danger()
        catch {
          case e: Throwable => // swallows stack overflow / out of memory errors
            body
        }
      }

      // into this
      object A {
        try danger()
        catch {
          case scala.util.control.NonFatal(e) =>
            body
        }
      }

    For extra credit, you can:

    @ul
      @li
        Add an @code{import scala.util.control.NonFatal} at the top of the file,
        if the import doesn't already exist.
      @li
        Allow the user to disable the rewrite with a comment like this:

    @hl.scala
      catch {
        case e: Throwable => // scalaworld: off
      }

  @sect{Rewrite lst.filter(cond).headOption to lst.find(cond)}
    @p
      Implement @code{noFilterHeadOption} so that @code{FilterHeadSuite} passes.

    @hl.scala
      /** Rewrites lst.filter(cond).headOption to lst.find(cond) */
      def noFilterHeadOption(tree: Tree): Tree = ???

  @sect{Remove redundant calls to sbt settings}

    @hl.scala
      // Refactor this
      project

        .settings(commonSettings: _*)
        .settings(publishSettings: _*)
        .settings(
          libraryDeps += ""
        )

      // into this
      project.settings(
        commonSettings,
        publishSettings,
        libraryDeps += ""
      )

  @sect{Never do lst.length == 0}

    @hl.scala
      // Refactor this
      lst.length == 0

      // into this
      lst.nonEmpty

  @sect{Avoid Future.apply when possible}

    @hl.scala
      // Refactor this
      Future(<Some literal>)
      Future { <Some literal> }

      // into this
      Future.successful(<Some literal>)
      Future.successful { <Some literal> }

  @sect{Prefer Option(x) to Some(x)}
    @p
      To prevent @code{Some(null)}.

    @hl.scala
      // Refactor this
      Some(arg)

      // into this
      Option(arg)
