@import Main._
@import scalaworld.Readme._

@sect{Part 4 - Macro annotations}
  @p
    It's possible to write macro annotations on scala.meta trees using
    scala.meta paradise.
    From sbt, run your first macro annotation with

  @hl.scala
    macros/test:run

  Here is an example macro annotation:

  @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"Main.scala")

  The annotation wraps the body of an object into a @code{main} function, serving
  a similar function as extending @code{App}.

  @sect{Class2Map macro}
    Implement a @code{Class2Map} macro annotation that injects a @code{toMap} method
    that creates a @code{Map[String, Any]} from the fields of this class.

    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"Class2Map.scala")

  @sect{WithApply macro}
    Implement a @code{WithApply} macro annotation that creates a @code{apply}
    method to construct an instance of the class (just like is created for case classes).

    @p
      The challenge here is to handle the companion object correctly.

      @ul
        @li
          If the companion object exists, add the @code{apply} method to it.
        @li
          If the companion object doesn't exists, create it.
    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"WithApply.scala")

  @sect{Debug macro}
    Open up @code{Debug.scala} and implement a @code{Debug} macro annotation
    for @b{methods} that:

    @ul
      @li
        Prints out the argument names and their values at the beginning of the method.
      @li
        Prints out the time it took to run the method.
      @li
        Prints out the value of the method result.

    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"Debug.scala")

    For extra credit:
    @ul
      @li
        Expand the method into two methods, where one is the original method
        and the second one has a named suffixed with @code{Debug}
        and that's where the printing happens.
        The biggest challenge is to transform the argument list into a
        function call on the original method.

